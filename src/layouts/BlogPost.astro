---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import BaseLayout from "./BaseLayout.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import { KEYWORDS } from "../consts";
import ImageComp from "../components/ImageComp.astro";

type Props = CollectionEntry<"blog">["data"];

const {
  title,
  author,
  description,
  pubDate,
  updatedDate,
  heroImage,
  category,
  tags,
  keywords,
} = Astro.props;

// Breadcrumb data
const breadcrumbs = [
  { name: "Home", href: "/" },
  { name: "Blog", href: "/blog" },
  { name: title, href: Astro.url.pathname },
];

// Article Schema
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  description: description,
  author: {
    "@type": "Organization",
    name: author,
  },
  publisher: {
    "@type": "Organization",
    name: "Penn Air Repair",
    logo: {
      "@type": "ImageObject",
      url: "https://pennairrepair.com/penn-air-logo-250.webp",
    },
  },
  datePublished: pubDate.toISOString(),
  dateModified: (updatedDate || pubDate).toISOString(),
  image: heroImage
    ? `https://pennairrepair.com${heroImage}`
    : "https://pennairrepair.com/penn-air-logo-250.webp",
  url: `https://pennairrepair.com${Astro.url.pathname}`,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": `https://pennairrepair.com${Astro.url.pathname}`,
  },
  articleSection: category,
  keywords: tags.join(", "),
};
---

<BaseLayout
  title={title + " | Blog | Penn Air Repair"}
  description={description + " Penn Air Repair Blog."}
  keywords={category + ", " + tags.join(", ") + keywords ? keywords : KEYWORDS}
  image={heroImage}
>
  <!-- Article Schema -->
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

  <div class="h-32 w-full bg-white"></div>

  <div class="bg-white py-4">
    <div class="container mx-auto px-4">
      <Breadcrumbs items={breadcrumbs} />
    </div>
  </div>

  <section
    class="flex justify-center pt-2 bg-gradient-to-b from-white via-yellow-50 to-red-50"
  >
    <article class="mx-auto max-w-4xl">
      <div
        class="mb-12 lg:mb-0 aspect-square lg:aspect-video lg:rounded-t-md shadow-md overflow-hidden"
      >
        {
          heroImage && (
            <ImageComp
              imagePath={heroImage}
              imageAlt={title}
              styles="object-cover h-full w-full bg-white"
            />
          )
        }
      </div>
      <div class="mx-auto max-w-4xl bg-white prose font-sans pt-12 pb-32 px-5">
        <div class="title">
          <div class="date">
            <FormattedDate date={pubDate} />
            {
              updatedDate && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )
            }
          </div>
          <h1 class="text-5xl m-0 font-sans">{title}</h1>
          <p class="text-sm font-light">Published by:</p>
          <p class="-mt-5 text-base font-medium">{author}</p>
          <div class="md:flex gap-2 hidden">
            <span
              class="bg-yellow-400 text-blue-950 inline-flex items-center capitalize px-3 py-1 text-xs md:text-sm rounded-md"
            >
              {category}
            </span>
            {
              tags
                .slice(0, 3)
                .map((tag, index) => (
                  <span
                    class={`bg-blue-500 text-white inline-flex items-center capitalize px-3 py-1 text-xs md:text-sm rounded-md`}
                  >
                    {tag}
                  </span>
                ))
            }
          </div>
          <hr />
        </div>
        <div class="flex relative justify-center">
          <slot />
        </div>
      </div>
    </article>
  </section>
</BaseLayout>
