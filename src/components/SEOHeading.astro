---
interface SEOHeading {
  level: 1 | 2 | 3 | 4 | 5 | 6;
  text: string;
  className?: string;
  id?: string;
}

interface Props {
  heading: SEOHeading;
}

const { heading } = Astro.props;
const { level, text, className = "", id } = heading;

// Default styles for each heading level (can be overridden with className)
const defaultStyles = {
  1: "text-4xl md:text-5xl lg:text-6xl font-bold",
  2: "text-3xl md:text-4xl lg:text-5xl font-bold",
  3: "text-2xl md:text-3xl lg:text-4xl font-semibold",
  4: "text-xl md:text-2xl lg:text-3xl font-semibold",
  5: "text-lg md:text-xl lg:text-2xl font-medium",
  6: "text-base md:text-lg lg:text-xl font-medium",
};

const finalClassName = className || defaultStyles[level];
---

{
  level === 1 && (
    <h1 class={finalClassName} id={id}>
      {text}
    </h1>
  )
}
{
  level === 2 && (
    <h2 class={finalClassName} id={id}>
      {text}
    </h2>
  )
}
{
  level === 3 && (
    <h3 class={finalClassName} id={id}>
      {text}
    </h3>
  )
}
{
  level === 4 && (
    <h4 class={finalClassName} id={id}>
      {text}
    </h4>
  )
}
{
  level === 5 && (
    <h5 class={finalClassName} id={id}>
      {text}
    </h5>
  )
}
{
  level === 6 && (
    <h6 class={finalClassName} id={id}>
      {text}
    </h6>
  )
}

<!-- Heading Schema for better structure -->
<script
  type="application/ld+json"
  set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "WebPageElement",
    cssSelector: id ? `#${id}` : `h${level}`,
    name: text,
  })}
/>
